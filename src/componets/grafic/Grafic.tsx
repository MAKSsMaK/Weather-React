import React, {FC} from 'react';
import {useCustomSelector} from "../../hooks/store";

interface GrafMode {
    currentTheme: string;
}

export const GraficOne: FC<GrafMode> = ({currentTheme}) => {
    const color = currentTheme === 'dark' ? 'white' : '#080338'
    const {weather} = useCustomSelector(state => state.currentWeatherSliceReducer)
    let objFill = weather.forecast.forecastday[0].day.uv / 0.13

    return (
        <div className="relative">
            <svg width="327" height="147" viewBox="0 0 327 149" fill="none  " xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M326.058 148.798C326.058 109.623 308.916 72.0528 278.404 44.3519C247.891 16.6511 206.507 1.08887 163.356 1.08887C120.205 1.08886 78.8211 16.6511 48.3086 44.3519C17.7961 72.0528 0.654303 109.623 0.654297 148.798"
                    stroke={color}/>
            </svg>
            <svg className="absolute bottom-[5px] left-[25px]" width="279" height="125" viewBox="0 0 279 126"
                 fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M3.91355 125.621C3.28347 125.621 2.74678 125.449 2.30349 125.106C1.86019 124.761 1.52145 124.26 1.28726 123.605C1.05307 122.947 0.935974 122.152 0.935974 121.221C0.935974 120.296 1.05307 119.505 1.28726 118.85C1.52424 118.192 1.86438 117.69 2.30767 117.345C2.75375 116.996 3.28904 116.822 3.91355 116.822C4.53806 116.822 5.07197 116.996 5.51526 117.345C5.96134 117.69 6.30147 118.192 6.53566 118.85C6.77264 119.505 6.89113 120.296 6.89113 121.221C6.89113 122.152 6.77404 122.947 6.53984 123.605C6.30565 124.26 5.96691 124.761 5.52362 125.106C5.08033 125.449 4.54364 125.621 3.91355 125.621ZM3.91355 124.701C4.53806 124.701 5.02318 124.4 5.36889 123.797C5.7146 123.195 5.88745 122.336 5.88745 121.221C5.88745 120.48 5.808 119.848 5.64908 119.327C5.49295 118.805 5.26713 118.408 4.9716 118.135C4.67886 117.862 4.32618 117.725 3.91355 117.725C3.29462 117.725 2.8109 118.03 2.4624 118.641C2.1139 119.249 1.93965 120.109 1.93965 121.221C1.93965 121.963 2.01772 122.593 2.17384 123.111C2.32997 123.63 2.55441 124.025 2.84715 124.295C3.14267 124.565 3.49814 124.701 3.91355 124.701Z"
                    fill={color}/>
                <path
                    d="M19.1991 65.9435V65.1908L22.0261 62.0961C22.3579 61.7337 22.6311 61.4186 22.8458 61.151C23.0605 60.8805 23.2194 60.6268 23.3225 60.3899C23.4285 60.1501 23.4814 59.8992 23.4814 59.6371C23.4814 59.336 23.409 59.0753 23.264 58.8551C23.1218 58.6348 22.9266 58.4647 22.6785 58.3449C22.4304 58.225 22.1516 58.165 21.8421 58.165C21.5131 58.165 21.226 58.2333 20.9806 58.3699C20.7381 58.5038 20.5499 58.692 20.416 58.9345C20.285 59.1771 20.2195 59.4614 20.2195 59.7876H19.2325C19.2325 59.2858 19.3482 58.8453 19.5796 58.4661C19.811 58.087 20.1261 57.7914 20.5248 57.5796C20.9262 57.3677 21.3765 57.2617 21.8756 57.2617C22.3774 57.2617 22.8221 57.3677 23.2096 57.5796C23.5971 57.7914 23.901 58.0772 24.1213 58.4369C24.3415 58.7965 24.4517 59.1966 24.4517 59.6371C24.4517 59.9521 24.3945 60.2602 24.2802 60.5613C24.1687 60.8596 23.9735 61.1928 23.6947 61.5608C23.4187 61.926 23.0354 62.3721 22.5447 62.899L20.621 64.9566V65.0235H24.6022V65.9435H19.1991Z"
                    fill={color}/>
                <path
                    d="M62.2278 25.274V24.4209L65.9916 18.4657H66.6106V19.7872H66.1924L63.3486 24.2871V24.354H68.4172V25.274H62.2278ZM66.2593 27.0305V18.4657H67.2462V27.0305H66.2593Z"
                    fill={color}/>
                <path
                    d="M139.156 8.8829C138.805 8.87732 138.454 8.81041 138.102 8.68216C137.751 8.55392 137.43 8.33785 137.14 8.03395C136.85 7.72727 136.618 7.31326 136.442 6.7919C136.266 6.26776 136.179 5.60979 136.179 4.818C136.179 4.05967 136.25 3.38776 136.392 2.80228C136.534 2.21401 136.74 1.71914 137.011 1.31767C137.281 0.913413 137.607 0.606734 137.989 0.397634C138.374 0.188534 138.808 0.0839844 139.29 0.0839844C139.769 0.0839844 140.196 0.18017 140.57 0.372542C140.946 0.562126 141.253 0.826985 141.49 1.16712C141.727 1.50726 141.88 1.89897 141.95 2.34226H140.929C140.834 1.95752 140.65 1.63829 140.377 1.38458C140.104 1.13088 139.742 1.00402 139.29 1.00402C138.626 1.00402 138.104 1.29258 137.722 1.8697C137.343 2.44681 137.152 3.25672 137.149 4.29943H137.216C137.372 4.06245 137.557 3.86032 137.772 3.69304C137.989 3.52298 138.229 3.39194 138.491 3.29994C138.753 3.20793 139.031 3.16193 139.323 3.16193C139.814 3.16193 140.263 3.2846 140.67 3.52995C141.077 3.7725 141.403 4.10846 141.649 4.53781C141.894 4.96437 142.017 5.45366 142.017 6.00569C142.017 6.53541 141.898 7.02052 141.661 7.46102C141.424 7.89874 141.091 8.24724 140.662 8.50652C140.235 8.76301 139.733 8.88847 139.156 8.8829ZM139.156 7.96286C139.507 7.96286 139.822 7.87504 140.101 7.69939C140.383 7.52375 140.604 7.28817 140.766 6.99264C140.931 6.69711 141.013 6.36813 141.013 6.00569C141.013 5.65161 140.933 5.3296 140.775 5.03965C140.618 4.74691 140.402 4.51411 140.126 4.34125C139.853 4.1684 139.541 4.08197 139.19 4.08197C138.925 4.08197 138.678 4.13494 138.449 4.24089C138.221 4.34404 138.02 4.48623 137.847 4.66745C137.677 4.84867 137.543 5.05637 137.446 5.29057C137.348 5.52197 137.299 5.76592 137.299 6.02242C137.299 6.36255 137.379 6.68038 137.538 6.97591C137.699 7.27144 137.92 7.50981 138.198 7.69103C138.48 7.87225 138.799 7.96286 139.156 7.96286Z"
                    fill={color}/>
                <path
                    d="M205.866 23.9713C205.292 23.9713 204.785 23.8695 204.344 23.666C203.906 23.4597 203.565 23.1767 203.32 22.817C203.074 22.4546 202.953 22.042 202.956 21.5792C202.953 21.2167 203.024 20.8822 203.169 20.5755C203.314 20.266 203.512 20.0081 203.763 19.8018C204.017 19.5927 204.3 19.4603 204.612 19.4045V19.3544C204.202 19.2484 203.876 19.0184 203.633 18.6643C203.391 18.3075 203.271 17.9018 203.274 17.4474C203.271 17.0124 203.381 16.6235 203.604 16.2806C203.827 15.9377 204.134 15.6672 204.524 15.4693C204.917 15.2713 205.365 15.1724 205.866 15.1724C206.363 15.1724 206.806 15.2713 207.196 15.4693C207.587 15.6672 207.893 15.9377 208.116 16.2806C208.342 16.6235 208.457 17.0124 208.459 17.4474C208.457 17.9018 208.332 18.3075 208.087 18.6643C207.845 19.0184 207.523 19.2484 207.121 19.3544V19.4045C207.431 19.4603 207.709 19.5927 207.957 19.8018C208.206 20.0081 208.404 20.266 208.551 20.5755C208.699 20.8822 208.774 21.2167 208.777 21.5792C208.774 22.042 208.649 22.4546 208.401 22.817C208.155 23.1767 207.814 23.4597 207.376 23.666C206.941 23.8695 206.438 23.9713 205.866 23.9713ZM205.866 23.0512C206.254 23.0512 206.589 22.9885 206.87 22.863C207.152 22.7376 207.369 22.5606 207.523 22.3319C207.676 22.1033 207.754 21.8357 207.757 21.529C207.754 21.2056 207.67 20.9198 207.506 20.6717C207.341 20.4236 207.117 20.2284 206.832 20.0862C206.551 19.944 206.229 19.8729 205.866 19.8729C205.501 19.8729 205.175 19.944 204.888 20.0862C204.603 20.2284 204.379 20.4236 204.215 20.6717C204.053 20.9198 203.973 21.2056 203.976 21.529C203.973 21.8357 204.047 22.1033 204.198 22.3319C204.351 22.5606 204.57 22.7376 204.854 22.863C205.139 22.9885 205.476 23.0512 205.866 23.0512ZM205.866 18.9863C206.173 18.9863 206.445 18.925 206.682 18.8023C206.922 18.6797 207.11 18.5082 207.247 18.2879C207.383 18.0677 207.453 17.8098 207.456 17.5143C207.453 17.2243 207.385 16.972 207.251 16.7573C207.117 16.5399 206.931 16.3726 206.694 16.2555C206.458 16.1356 206.181 16.0757 205.866 16.0757C205.546 16.0757 205.266 16.1356 205.026 16.2555C204.786 16.3726 204.601 16.5399 204.47 16.7573C204.339 16.972 204.275 17.2243 204.277 17.5143C204.275 17.8098 204.34 18.0677 204.474 18.2879C204.61 18.5082 204.799 18.6797 205.038 18.8023C205.278 18.925 205.554 18.9863 205.866 18.9863Z"
                    fill={color}/>
                <path d="M248.577 57.3788V65.9435H247.54V58.4661H247.49L245.399 59.8546V58.8007L247.54 57.3788H248.577Z"
                      fill={color}/>
                <path
                    d="M253.834 66.0606C253.204 66.0606 252.667 65.8892 252.224 65.5462C251.781 65.2005 251.442 64.7001 251.208 64.0449C250.974 63.3869 250.856 62.5924 250.856 61.6612C250.856 60.7356 250.974 59.9452 251.208 59.29C251.445 58.632 251.785 58.1302 252.228 57.7845C252.674 57.436 253.21 57.2617 253.834 57.2617C254.459 57.2617 254.992 57.436 255.436 57.7845C255.882 58.1302 256.222 58.632 256.456 59.29C256.693 59.9452 256.812 60.7356 256.812 61.6612C256.812 62.5924 256.695 63.3869 256.46 64.0449C256.226 64.7001 255.887 65.2005 255.444 65.5462C255.001 65.8892 254.464 66.0606 253.834 66.0606ZM253.834 65.1406C254.459 65.1406 254.944 64.8395 255.289 64.2373C255.635 63.6351 255.808 62.7764 255.808 61.6612C255.808 60.9196 255.729 60.2881 255.57 59.7667C255.413 59.2454 255.188 58.8481 254.892 58.5749C254.599 58.3016 254.247 58.165 253.834 58.165C253.215 58.165 252.731 58.4703 252.383 59.0809C252.034 59.6887 251.86 60.5488 251.86 61.6612C251.86 62.4028 251.938 63.0329 252.094 63.5514C252.25 64.07 252.475 64.4645 252.768 64.7349C253.063 65.0054 253.419 65.1406 253.834 65.1406Z"
                    fill={color}/>
                <path
                    d="M270.585 116.939V125.504H269.548V118.026H269.498L267.407 119.415V118.361L269.548 116.939H270.585Z"
                    fill={color}/>
                <path
                    d="M273.048 125.504V124.751L275.875 121.656C276.207 121.294 276.48 120.979 276.695 120.711C276.91 120.441 277.069 120.187 277.172 119.95C277.278 119.71 277.331 119.459 277.331 119.197C277.331 118.896 277.258 118.635 277.113 118.415C276.971 118.195 276.776 118.025 276.528 117.905C276.28 117.785 276.001 117.725 275.691 117.725C275.362 117.725 275.075 117.793 274.83 117.93C274.587 118.064 274.399 118.252 274.265 118.495C274.134 118.737 274.069 119.022 274.069 119.348H273.082C273.082 118.846 273.197 118.405 273.429 118.026C273.66 117.647 273.975 117.351 274.374 117.14C274.775 116.928 275.226 116.822 275.725 116.822C276.227 116.822 276.671 116.928 277.059 117.14C277.446 117.351 277.75 117.637 277.971 117.997C278.191 118.357 278.301 118.757 278.301 119.197C278.301 119.512 278.244 119.82 278.129 120.121C278.018 120.42 277.823 120.753 277.544 121.121C277.268 121.486 276.885 121.932 276.394 122.459L274.47 124.517V124.584H278.451V125.504H273.048Z"
                    fill={color}/>
            </svg>
            <svg className="absolute bottom-0 left-[-15px]" width="361" height="158" viewBox="0 0 361 163" fill="none"
                 xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M360.625 160.615C362.213 140.063 358.747 119.458 350.439 100.067C342.131 80.6761 329.158 62.9107 312.318 47.8644C295.478 32.818 275.128 20.8094 252.521 12.5778C229.914 4.34629 205.528 0.0660751 180.865 0.000758997C156.202 -0.0645571 131.784 4.0864 109.114 12.1981C86.445 20.3097 66.004 32.2103 49.0501 47.1671C32.0963 62.1239 18.9883 79.8204 10.5335 99.1667C2.0786 118.513 -1.10127 142.44 0.331041 163H35.1258C33.9817 146.577 37.9359 125.029 44.6896 109.575C51.4433 94.1211 61.9139 79.9853 75.4566 68.0379C88.9992 56.0905 105.327 46.5843 123.436 40.1048C141.544 33.6252 161.049 30.3095 180.749 30.3616C200.45 30.4138 219.929 33.8328 237.988 40.4081C256.047 46.9835 272.302 56.5759 285.754 68.5948C299.206 80.6138 309.568 94.8047 316.205 110.294C322.841 125.783 325.61 142.243 324.341 163.659L380.625 190.600Z"
                    fill="url(#paint0_linear_94_2736)"/>
                <defs>
                    <linearGradient id="paint0_linear_94_2736" x1="-10%" y1="0" x2={`${objFill}%`} y2="0"
                                    gradientUnits="userSpaceOnUse">
                        <stop stop-color="red"/>
                        <stop offset="1" stop-color="red" stop-opacity="0"/>
                    </linearGradient>
                </defs>
            </svg>
        </div>
    );
};


export const GraficTwo: FC<GrafMode> = ({currentTheme}) => {
    const color = currentTheme === 'dark' ? 'white' : '#080338'
    const {weather} = useCustomSelector(state => state.currentWeatherSliceReducer)
    const returnTime = (dateTime: string) => {
        const arr = dateTime.split(" ")
        const arrNew = arr[0].split(":")
        const currentArr = []
        currentArr.push(parseInt(arrNew[0]), parseInt(arrNew[1]))
        return currentArr
    }
    const currentTime = new Date()
    const hours = currentTime.getHours()
    const minute = currentTime.getMinutes()
    const sunrise = returnTime(weather.forecast.forecastday[0].astro.sunrise)
    const sunset = returnTime(weather.forecast.forecastday[0].astro.sunset)
    let out = (sunset[0] - sunrise[0] + 12) + (sunset[1] / 60 - sunrise[1] / 60)
    let out1 = (hours - sunrise[0]) + (minute / 60 - sunrise[1] / 60)
    let out2 = 100 - (out - out1) * 10.8
    if (out2 <= 100 && 95 <= out2) {
        out2 += 3
    }
    return (
        <div className="w-[327px] h-[147px] relative rounded-t-[150px] box-border">
            <svg width="327px" height="147px" viewBox="0 0 328 147" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M326.182 143.861C326.182 108.176 309.08 71.0761 278.637 43.7218C248.195 16.3675 206.905 1 163.853 1C120.8 0.999997 79.5113 16.3675 49.0687 43.7218C18.626 71.0761 1.52344 108.176 1.52344 146.861"
                    stroke={color} stroke-dasharray="7.84 7.84"/>
            </svg>
            <svg className="absolute bottom-[-5px]" width="327" height="153" viewBox="0 0 327 153" fill="none"
                 xmlns="http://www.w3.org/2000/svg">
                <g filter="url(#filter0_d_601_5415)">
                    <path fill-rule="evenodd" clip-rule="evenodd"
                          d="M322.937 145C322.979 143.671 323 142.338 323 141C323 63.1278 251.589 0 163.5 0C75.4106 0 4 63.1278 4 141C4 142.338 4.02107 143.671 4.06295 145H322.937Z"
                          fill="url(#paint0_linear_601_5415)" fill-opacity="0.16" shape-rendering="crispEdges"/>
                </g>
                <defs>
                    <filter id="filter0_d_601_5415" x="0" y="0" width="327" height="153" filterUnits="userSpaceOnUse"
                            color-interpolation-filters="sRGB">
                        <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                        <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                                       result="hardAlpha"/>
                        <feOffset dy="4"/>
                        <feGaussianBlur stdDeviation="2"/>
                        <feComposite in2="hardAlpha" operator="out"/>
                        <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
                        <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_601_5415"/>
                        <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_601_5415" result="shape"/>
                    </filter>
                    <linearGradient id="paint0_linear_601_5415" x1='0' y1="0" x2={`${out2}%`} y2=""
                                    gradientUnits="userSpaceOnUse">
                        <stop stop-color="#F6DE01"/>
                        <stop offset="1" stop-color="#F6DE01" stop-opacity="0"/>
                    </linearGradient>
                </defs>
            </svg>

        </div>
    );
};

export const GraficThree: FC<GrafMode> = ({currentTheme}) => {
    const {weather} = useCustomSelector(state => state.currentWeatherSliceReducer)
    const color = currentTheme === 'dark' ? 'white' : '#080338'
    return (
        <div className="relative">
            <svg className="flex justify-between" width="351" height="148" viewBox="0 0 351 142" fill="none"
                 xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M1 140C1 140 2.02135 84.3529 21.5 85.3339C35.4492 86.0365 38.3898 113.696 52 117.319C75.8258 123.663 74.0685 42.0412 98.5 42.8806C122.264 43.697 113.256 111.515 136.5 117.319C175.262 126.999 141.869 -0.228276 181.5 1.00897C220.626 2.23044 185.28 127.134 223.5 117.319C249.434 110.66 243 75.6915 261.5 73.1213C280 70.5511 277.745 134.678 304.5 120.809C322.446 111.506 320.438 73.1213 334 69.0505C349.5 64.3979 350.5 141.5 350.5 141.5"
                    stroke={color}/>
            </svg>
            <svg className="absolute bottom-[-5px] left-[2px]" width="350px" height="148px" viewBox="0 0 351 142"
                 fill="none" xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M20.4708 84.3339C1.01989 83.3529 0 139 0 139H350C350 139 348.003 63.3979 332.525 68.0505C318.982 72.1213 320.988 110.506 303.067 119.809C276.35 133.678 278.602 69.5511 260.128 72.1213C241.655 74.6915 248.08 109.66 222.183 116.319C184.017 126.134 219.313 1.23044 180.243 0.00896678C140.668 -1.22828 174.014 125.999 135.307 116.319C112.096 110.515 121.091 42.697 97.3609 41.8806C72.9643 41.0412 74.719 122.663 50.9272 116.319C37.3365 112.696 34.4001 85.0365 20.4708 84.3339Z"
                    fill="url(#paint0_linear_94_2758)"/>
                <defs>
                    <linearGradient id="paint0_linear_94_2758" x1="0" y1="0"
                                    x2={`${weather.forecast.forecastday[0].day.avghumidity}%`} y2="0"
                                    gradientUnits="userSpaceOnUse">
                        <stop stop-color="#333FAA"/>
                        <stop offset="1" stop-color="#0028B8" stop-opacity="0"/>
                    </linearGradient>
                </defs>
            </svg>
        </div>
    );
};

export const HrElem: FC<GrafMode> = ({currentTheme}) => {
    const color = currentTheme === 'dark' ? 'white' : '#080338'
    return (
        <svg width="373" height="2" viewBox="0 0 373 2" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0 1L373 1.44444" stroke={color}/>
        </svg>
    );
};



